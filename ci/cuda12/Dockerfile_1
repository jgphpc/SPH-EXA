FROM docker.io/nvidia/cuda:12.2.2-base-ubuntu22.04
ENV TZ Europe/Zurich

#{{{ apt: cuda/12.2 + deps 
RUN sed -i 's@archive.ubuntu.com@ubuntu.ethz.ch@' /etc/apt/sources.list \
    && export http_proxy="proxy.cscs.ch:8080" \
    && export https_proxy="proxy.cscs.ch:8080" \
    && export no_proxy=".local, .cscs.ch, localhost, 148.187.0.0/16, 10.0.0.0/8,172.16.0.0/12" \
    && echo "## apt:get " \
    && apt update --quiet > /dev/null \
    && apt upgrade -y --quiet > /dev/null \
    && DEBIAN_FRONTEND=noninteractive \
       apt install -y --quiet --no-install-recommends \
       cuda-nvcc-12-2 libcublas-dev-12-2 \
       gcc-12 g++-12 \
       pkg-config libtbb-dev zlib1g-dev git file wget vim-tiny \
       autoconf automake libtool \
       python-is-python3 \
       python3-pip libpython3-dev python3-numpy python3-matplotlib > /dev/null \
    && echo "## apt:clean " \
    && apt clean autoremove \
    && mkdir -p /usr/local/games/bin \
    && cd /usr/local/games/bin \
    && ln -fs /usr/bin/cpp-12 cpp \
    && ln -fs /usr/bin/g++-12 g++ \
    && ln -fs /usr/bin/gcc-12 gcc
#}}}

#{{{ SRC
RUN echo "getting src" \
    && mkdir -p /usr/local/games/SRC \
    && cd /usr/local/games/SRC \
    && wget --quiet https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3-linux-aarch64.tar.gz \
    && wget --quiet https://www.mpich.org/static/downloads/4.2.0/mpich-4.2.0.tar.gz \
    && wget --quiet https://hdf-wordpress-1.s3.amazonaws.com/wp-content/uploads/manual/HDF5/HDF5_1_14_3/src/hdf5-1.14.3.tar.gz
#}}}

#{{{ cmake:3.28.3 
RUN echo \
    && export VV=3.28.3 VVshort=3.28 \
    && echo "## cmake:$VV" \
    && cd /usr/local/games \
    && tar xf SRC/cmake-$VV-linux-aarch64.tar.gz \
    && cp -a cmake-$VV-linux-aarch64/bin/* /usr/bin/ \
    && cp -a cmake-$VV-linux-aarch64/share/cmake-$VVshort /usr/share/cmake-$VVshort \
    && rm -fr cmake-$VV-linux-aarch64
#}}}

#{{{ mpich:4.2.0 
RUN echo \
    && cd /usr/local/games \
    && export VV=4.2.0 \
    && echo "## mpich:$VV" \
    && tar xf SRC/mpich-$VV.tar.gz \
    && cd mpich-$VV/ \
    && echo "## mpich:$VV:autogen" \
    && ./autogen.sh -yaksa-depth=1 \
    && echo "## mpich:$VV:configure" \
    && ./configure --prefix=/usr --disable-fortran --enable-fortran=no > /dev/null \
    && echo "## mpich:$VV:make" \
    && make --quiet -j `grep -c processor /proc/cpuinfo` install > /dev/null \
    && echo "## mpich:$VV:clean" \
    && cd /usr/local/games \
    && rm -fr mpich-$VV \
    && ldconfig
#}}}

#{{{ hdf5:1.14.3 
RUN echo \
    && export VV=1.14.3 \
    && echo "## hdf5:$VV" \
    && cd /usr/local/games \
    && tar xf SRC/hdf5-$VV.tar.gz \
    && cmake \
    -DCMAKE_C_COMPILER:STRING=mpicc \
    -DCMAKE_C_FLAGS:STRING=-w \
    -DONLY_SHARED_LIBS:BOOL=ON \
    -DHDF5_BUILD_HL_LIB:BOOL=ON \
    -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=ON \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DHDF5_ENABLE_PARALLEL:BOOL=ON \
    -DHDF5_BUILD_TOOLS:BOOL=OFF \
    -DBUILD_STATIC_LIBS=OFF \
    -DHDF5_BUILD_EXAMPLES:BOOL=OFF \
    -DBUILD_TESTING:BOOL=OFF \
    -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF \
    -DHDF5_ENABLE_SZIP_ENCODING:BOOL=OFF \
    -DHDF5_ENABLE_THREADSAFE:BOOL=OFF \
    -DHDF5_BUILD_CPP_LIB:BOOL=OFF \
    -DHDF5_BUILD_FORTRAN:BOOL=OFF \
    -DHDF5_BUILD_JAVA:BOOL=OFF \
    -S hdf5-$VV -B build-hdf5 
    # > /dev/null

RUN echo \
    && cmake --build build-hdf5 -t install -j `grep -c processor /proc/cpuinfo` \
    && ldconfig \
    && cd /usr/local/games \
    && rm -fr hdf5-$VV build-hdf5
#}}}

#{{{ analytical_solutions: 
RUN echo \
    && echo "## analytical_solutions + reframe:" \
    && pip install ReFrame-HPC h5py matplotlib
#}}}

#{{{ next step: Dockerfile_2
#}}}
