include:
  # - local: '.gitlab/ubuntu/ubuntu_*.yml'
  # - local: '.gitlab/common.yml'
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.cscs.yml'

stages:
  - SPHbase
  - SPHinstall
  - SPHtest
  #- SPHdeploy

variables:
  jfrogtag: 'docker_jfrog'
  JG_DEPS_PATH: ftp://ftp.cscs.ch/out/jgp/hpc/containers
  # export JG_DEPS_PATH='ftp://ftp.cscs.ch/out/jgp/hpc/containers'

#{{{ .sph-base / deps-ubu-gnu
.sph-base: &sph-base
  # tag must be 'docker_jfrog'
  tags:
    - docker_jfrog
  before_script:
    # - echo CI_PROJECT_DIR=$CI_PROJECT_DIR PWD=$PWD
    - date
    - sed -i 's@archive.ubuntu.com@ubuntu.ethz.ch@' /etc/apt/sources.list
    - export TZ=Europe/Zurich DEBIAN_FRONTEND=noninteractive
    - apt update > /dev/null
    #
    - if [ "$VARIANT" = "cuda" ]; then
        echo "## apt nvcc/11.4 (+gcc9+clang12+make+thrust)";
        apt install -y --no-install-recommends wget vim-tiny file cuda-nvcc-11-4 clang-12 libomp-12-dev > /dev/null;
      fi
    - apt clean autoremove > /dev/null
    #
    - cd /usr/local/games
    - wget --quiet $JG_DEPS_PATH/c/CMake/cmake-3.22.2-linux-x86_64.tar.gz
    - wget --quiet $JG_DEPS_PATH/m/MPICH/mpich-3.1.4.tar.gz
    - wget --quiet $JG_DEPS_PATH/g/googletest/release-1.11.0.tar.gz
    #
    - date; echo "## cmake:"
    #- cd /usr/local/games
    - tar xf cmake-3.22.2-linux-x86_64.tar.gz
    - cp -a cmake-3.22.2-linux-x86_64/bin/* /usr/bin/
    - cp -a cmake-3.22.2-linux-x86_64/share/cmake-3.22 /usr/share/cmake-3.22
    - rm -fr cmake-3.22.2-linux-x86_64.tar.gz cmake-3.22.2-linux-x86_64/bin/cmake-gui
    #
    - date; echo "## googletest:"
    #- cd /usr/local/games
    - tar xf release-1.11.0.tar.gz
    - rm -f release-1.11.0.tar.gz
    #
    - date; echo "## mpich/3.1.4:"
    #- cd /usr/local/games
    - tar xf /usr/local/games/mpich-3.1.4.tar.gz
    - cd mpich-3.1.4/
    - ./configure --prefix=/usr --enable-fortran=no > /dev/null
    - make --quiet -j `grep processor /proc/cpuinfo | wc -l` install > /dev/null
    - cd /usr/local/games
    - rm -fr mpich-3.1.4 mpich-3.1.4.tar.gz
    - ldconfig
    - date; echo "## done"
#}}}
#{{{ .sph-install
.sph-install: &sph-install
  # tag must be 'docker_jfrog'
  tags:
    - docker_jfrog
  before_script:
    - cd $CI_PROJECT_DIR
    - pwd
    #- sed -i 's@archive.ubuntu.com@ubuntu.ethz.ch@' /etc/apt/sources.list
    #- export TZ=Europe/Zurich DEBIAN_FRONTEND=noninteractive
    #
    - sed -i "s@GIT_REPOSITORY@URL /usr/local/games/googletest-release-1.11.0/\n#@" ./domain/test/CMakeLists.txt.in
    - sed -i "s@GIT_TAG@#GIT_TAG @" ./domain/test/CMakeLists.txt.in
    #
#     - if [ "$VARIANT" = "cuda" ]; then
#         echo "## apt nvcc/11.4 (+gcc9+clang12+make+thrust)";
#         apt install -y --no-install-recommends wget vim-tiny file cuda-nvcc-11-4 clang-12 libomp-12-dev > /dev/null;
#       fi
    #      
    - echo "## sph:"
    #- if [ "x$with_clang" = "x" ]; then extra=g++; else extra=clang++-12; fi
    #- export MPICH_CXX=$extra
    - echo
      BUILD_TESTING=$BUILD_TESTING
      BUILD_ANALYTICAL=$BUILD_ANALYTICAL
      SPH_EXA_WITH_HIP=$SPH_EXA_WITH_HIP
      BUILD_RYOANJI=$BUILD_RYOANJI
      CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
    - |
      cmake -S . -B build
      -DCMAKE_CXX_COMPILER=mpicxx
      -DBUILD_TESTING=$BUILD_TESTING
      -DBUILD_ANALYTICAL=$BUILD_ANALYTICAL
      -DSPH_EXA_WITH_HIP=$SPH_EXA_WITH_HIP
      -DBUILD_RYOANJI=$BUILD_RYOANJI
      -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE
    - cd build
    - make help
    - make -j `grep processor /proc/cpuinfo | wc -l` install
    - date; echo "## done"
#}}}

#{{{ nvidia/cuda:11.4 --> sph-exa_base:cuda
sph:base:cuda:
  # notice the final :
  stage: SPHbase
  extends: .sph-base
  # extends: .deps-ubu-gnu_fake
  image: nvidia/cuda:11.4.2-base-ubuntu20.04
  tags: 
    - $jfrogtag
  script:
    # - echo "empty stage for a better display of deps"
    - nvcc --version
    - cmake --version
  variables:
    VARIANT: 'cuda'
    PERSIST_IMAGE_NAME: 'sph-exa_base:cuda'
#}}}

#{{{ nvidia/cuda:11.4 --> sph-exa_base:cuda --> sph-exa_install:cuda
sph:install:cuda:
  stage: SPHinstall
  extends: .sph-install
  image: art.cscs.ch/contbuild/testing/anfink/sph-exa_base:cuda
  needs: ['sph:base:cuda']
  tags:
    - $jfrogtag
  script:
    - ls -l /usr/local/bin/
  variables:
    VARIANT: 'cuda'
    BUILD_TESTING: 'OFF'
    BUILD_ANALYTICAL: 'OFF'
    SPH_EXA_WITH_HIP: 'OFF'
    BUILD_RYOANJI: 'OFF'
    CMAKE_BUILD_TYPE: 'Debug'
    PERSIST_IMAGE_NAME: 'sph-exa_install:cuda'
#}}}

#{{{
# build:ubu:gnu:Debug:
#   stage: build
#   extends: .build-debug
#   image: art.cscs.ch/contbuild/testing/anfink/sph-exa_base:1.0
#   tags:
#     - $jfrogtag
#   needs: ['ubu:deps:Debug']
#   script:
#     - ls -l /usr/local/sbin/
#   variables:
#     PERSIST_IMAGE_NAME: sph-exa_gnu:1.0
#     # FIXME: should not be a static version (should be the SHA hash
#     # ($CI_COMMIT_SHA) instead of 1.0) but this will fill up JFrog, so we would
#     # need a deletion policy (todo) and/or a deploy step to retag (todo) the
#     # container with a usable version.
#     # https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# #}}}
